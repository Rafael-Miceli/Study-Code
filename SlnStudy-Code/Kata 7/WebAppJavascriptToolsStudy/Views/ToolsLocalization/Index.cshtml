@model WebAppJavascriptToolsStudy.Models.EditCompaies
           
<link href="../../Content/Site.css" rel="stylesheet"/>
<script src="~/Scripts/jquery-2.0.3.js"></script>
<script src="~/Scripts/jquery.tablesorter.js"></script>
<script src="~/Scripts/jquery.tablesorter.widgets.js"></script>
<script src="~/Scripts/jquery.tablesorter.pager.js"></script>
<link href="~/Content/bootstrap.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap.js"></script>

<script>
    $(function() {
        var pagerOptions = {
            // target the pager markup - see the HTML block below
            container: $(".pager"),

            // use this url format "http:/mydatabase.com?page={page}&size={size}&{sortList:col}"
            ajaxUrl: null,

            // modify the url after all processing has been applied
            customAjaxUrl: function(table, url) { return url; },

            // process ajax so that the data object is returned along with the total number of rows
            // example: { "data" : [{ "ID": 1, "Name": "Foo", "Last": "Bar" }], "total_rows" : 100 }
            ajaxProcessing: function(ajax) {
                if (ajax && ajax.hasOwnProperty('data')) {
                    // return [ "data", "total_rows" ];
                    return [ajax.total_rows, ajax.data];
                }
            },

            // output string - default is '{page}/{totalPages}'
            // possible variables: {page}, {totalPages}, {filteredPages}, {startRow}, {endRow}, {filteredRows} and {totalRows}
            output: '{startRow} to {endRow} ({totalRows})',

            // apply disabled classname to the pager arrows when the rows at either extreme is visible - default is true
            updateArrows: true,

            // starting page of the pager (zero based index)
            page: 0,

            // Number of visible rows - default is 10
            size: 10,

            // Save pager page & size if the storage script is loaded (requires $.tablesorter.storage in jquery.tablesorter.widgets.js)
            savePages: true,

            // if true, the table will remain the same height no matter how many records are displayed. The space is made up by an empty
            // table row set to a height to compensate; default is false
            fixedHeight: true,

            // remove rows from the table to speed up the sort of large tables.
            // setting this to false, only hides the non-visible rows; needed if you plan to add/remove rows with the pager enabled.
            removeRows: false,

            // css class names of pager arrows
            cssNext: '.next', // next page arrow
            cssPrev: '.prev', // previous page arrow
            cssFirst: '.first', // go to first page arrow
            cssLast: '.last', // go to last page arrow
            cssGoto: '.gotoPage', // select dropdown to allow choosing a page

            cssPageDisplay: '.pagedisplay', // location of where the "output" is displayed
            cssPageSize: '.pagesize', // page size selector - select dropdown that sets the "size" option

            // class added to arrows when at the extremes (i.e. prev/first arrows are "disabled" when on the first page)
            cssDisabled: 'disabled', // Note there is no period "." in front of this class name
            cssErrorRow: 'tablesorter-errorRow' // ajax error information row
        };


        $("#table").tablesorter({ widgets: ['filter'] }).bind('pagerChange pagerComplete pagerInitialized pageMoved', function(e, c) {
            var msg = '"</span> event triggered, ' + (e.type === 'pagerChange' ? 'going to' : 'now on') +
                ' page <span class="typ">' + (c.page + 1) + '/' + c.totalPages + '</span>';
            $('#display')
                .append('<li><span class="str">"' + e.type + msg + '</li>')
                .find('li:first').remove();
        }).tablesorterPager(pagerOptions);
        

        //$('#submit').click(function () {

        //    var checkboxesIDs = $("#table input:checkbox:checked").map(function () {
        //        return $(this).val();
        //    }).get();

        //    alert(checkboxesIDs);
        //});
    });

</script>

<h2>title</h2>

@using (Html.BeginForm())
{
    <fieldset>
    
    <div>
        @Html.LabelFor(m => m.Name)
    </div>
    <div>
        @Html.EditorFor(m => m.Name)
    </div>
    
    <table id="table" class="table table-striped table-bordered table-hover table-condensed">
        <thead>
            <tr>
                <th class="filter-false sorter-false" style="width: 15px;">
                </th>
                <th>
                    Nome
                </th>
            </tr>
        </thead>
        <tbody>
      
            @for (var i = 0; i < Model.ToolsLocalizationsSelected.Count; i++)
            {
                <tr>
                    <td>
                        @Html.HiddenFor(tlId => tlId.ToolsLocalizationsSelected[i].Value)
                        @Html.HiddenFor(tlId => tlId.ToolsLocalizationsSelected[i].Text)
                        @Html.CheckBoxFor(tlId => tlId.ToolsLocalizationsSelected[i].Selected, new {id = "Chk-" + i})
                    </td>
                    <td>
                        @Html.Label(Model.ToolsLocalizationsSelected[i].Text, new { @for = "Chk-" + i})
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div id="pager" class="pager">
        <form>
            <img src="first.png" class="first" />
            <img src="prev.png" class="prev" />
            <span class="pagedisplay"></span> <!-- this can be any element, including an input -->
            <img src="next.png" class="next" />
            <img src="last.png" class="last" />
            <select class="pagesize">
                <option selected="selected" value="5">5</option>
                <option value="20">20</option>
                <option value="30">30</option>
                <option value="40">40</option>
            </select>
        </form>
    </div>
    
    @Html.HiddenFor(m => m.Id)
    
    <p>
        <input type="submit" value="submit" />
    </p>
        
    </fieldset>
}

